import { BaseCache } from "./cache.interface";
/**
 * `CacheItem` is a simple wrapper for a value type that allows cache capacity
 * to be managed by persisting items that are accessed most frequently, and
 * removing items that are accessed least frequently.
 */
export interface CacheItem<K, V> {
    hits: number;
    key: K;
    value: V;
}
/**
 * A `Rebalancer` is a method that operates on a cache to ensure it honors
 * its capacity.
 */
declare type Rebalancer<K> = (newKey: K) => void;
export interface CacheInternals<K, V> {
    get_store(): Map<K, CacheItem<K, V>>;
}
/**
 * An `ItemFactory` is a function that returns an object implementing the
 * CacheItem structure. Implementers of this function may choose to extend the
 * CacheItem interface to support special cache behaviors.
 */
export declare type ItemFactory<K, V> = (key: K, value: V) => CacheItem<K, V>;
/**
 * Options for extending the base behavior of the core cache implementation.
 */
export interface BaseCacheOptions<K, V> {
    itemFactory?: ItemFactory<K, V>;
}
export declare function create_rebalancer<K, V>(c: Map<K, CacheItem<K, V>>, capacity: number): Rebalancer<K>;
/**
 * CoreCache implements a base set of the Cache interface's methods, while
 * providing a few extra methods to make composition more flexible to other
 * public Cache implementations.
 */
export declare function CoreCache<K, V>(capacity: number, opts?: BaseCacheOptions<K, V>): BaseCache<K, V> & CacheInternals<K, V>;
export {};
