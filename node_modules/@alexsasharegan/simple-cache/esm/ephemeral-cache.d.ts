import { Cache, TypeLabel } from "./cache.interface";
/**
 * EphemeralCache extends the Cache interface to store values temporarily.
 * The implementation does not use timers, so expired values are purged on
 * write/read. To avoid blocking read/write with an `O(n)` purge, the purge is
 * deferred to the next tick using a Promise. This means that the `Cache.size`
 * method is non-deterministic--you can write a value that defers a purge, call
 * size and receive `n`, then try to read `n` values, but because they are
 * expired, you read `n - x(expired)` items. This tradeoff maintains expiration
 * accuracy and prevents read/write call stacks from blocking for a cache
 * expiration purge.
 */
export declare function EphemeralCache<K, V>(capacity: number, durationMs: number, typeLabel?: TypeLabel): Cache<K, V>;
