"use strict";function cov_24cgarcgx7(){var path="/Users/javed/promise-cache/src/promiseCache.ts";var hash="033b016817d17d6990446bfb7b90487cedbb40ee";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/javed/promise-cache/src/promiseCache.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:30}},"2":{start:{line:4,column:23},end:{line:4,column:62}},"3":{start:{line:7,column:8},end:{line:7,column:81}},"4":{start:{line:12,column:8},end:{line:12,column:67}},"5":{start:{line:15,column:8},end:{line:15,column:58}},"6":{start:{line:16,column:8},end:{line:16,column:21}},"7":{start:{line:19,column:8},end:{line:19,column:57}},"8":{start:{line:22,column:8},end:{line:22,column:52}},"9":{start:{line:25,column:8},end:{line:25,column:27}},"10":{start:{line:28,column:8},end:{line:28,column:33}},"11":{start:{line:31,column:0},end:{line:31,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:45},end:{line:8,column:5}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:24},end:{line:13,column:5}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:20},end:{line:17,column:5}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:13},end:{line:20,column:5}},line:18},"4":{name:"(anonymous_4)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:16},end:{line:23,column:5}},line:21},"5":{name:"(anonymous_5)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:12},end:{line:26,column:5}},line:24},"6":{name:"(anonymous_6)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:11},end:{line:29,column:5}},line:27}},branchMap:{"0":{loc:{start:{line:12,column:15},end:{line:12,column:66}},type:"cond-expr",locations:[{start:{line:12,column:41},end:{line:12,column:44}},{start:{line:12,column:47},end:{line:12,column:66}}],line:12}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/javed/promise-cache/src/promiseCache.ts",sources:["/Users/javed/promise-cache/src/promiseCache.ts"],names:[],mappings:";;;AAAA,+DAAqE;AAOrE,MAAa,YAAY;IAGvB,YAAY,EAAE,aAAa,EAAE,QAAQ,EAAe;QAClD,IAAI,CAAC,KAAK,GAAG,IAAA,6BAAc,EAAqB,aAAa,EAAE,QAAQ,CAAC,CAAC;IAC3E,CAAC;IAED,cAAc,CAAC,GAAM;QACnB,oEAAoE;QACpE,oEAAoE;QACpE,OAAO,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED,GAAG,CAAC,GAAM,EAAE,KAAiB;QAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,GAAG,CAAC,GAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,GAAM;QACX,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;CACF;AAjCD,oCAiCC",sourcesContent:["import { Cache, EphemeralCache } from \"@alexsasharegan/simple-cache\";\n\n\nexport interface CacheParams {\n  cacheCapacity: number;\n  cacheTTL: number;\n}\nexport class PromiseCache<K, V> {\n  private cache: Cache<string, Promise<V>>;\n\n  constructor({ cacheCapacity, cacheTTL }: CacheParams) {\n    this.cache = EphemeralCache<string, Promise<V>>(cacheCapacity, cacheTTL);\n  }\n\n  cacheKeyString(key: K): string {\n    // Note: This implementation may not sufficiently differentiate keys\n    // for certain object types depending on their toJSON implementation\n    return typeof key === \"string\" ? key : JSON.stringify(key);\n  }\n\n  put(key: K, value: Promise<V>): Promise<V> {\n    this.cache.write(this.cacheKeyString(key), value);\n    return value;\n  }\n\n  get(key: K): Promise<V> | undefined {\n    return this.cache.read(this.cacheKeyString(key));\n  }\n\n  remove(key: K): void {\n    this.cache.remove(this.cacheKeyString(key));\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  size(): number {\n    return this.cache.size();\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"033b016817d17d6990446bfb7b90487cedbb40ee"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_24cgarcgx7=function(){return actualCoverage;};}return actualCoverage;}cov_24cgarcgx7();cov_24cgarcgx7().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_24cgarcgx7().s[1]++;exports.PromiseCache=void 0;const simple_cache_1=(cov_24cgarcgx7().s[2]++,require("@alexsasharegan/simple-cache"));class PromiseCache{constructor({cacheCapacity,cacheTTL}){cov_24cgarcgx7().f[0]++;cov_24cgarcgx7().s[3]++;this.cache=(0,simple_cache_1.EphemeralCache)(cacheCapacity,cacheTTL);}cacheKeyString(key){cov_24cgarcgx7().f[1]++;cov_24cgarcgx7().s[4]++;// Note: This implementation may not sufficiently differentiate keys
// for certain object types depending on their toJSON implementation
return typeof key==="string"?(cov_24cgarcgx7().b[0][0]++,key):(cov_24cgarcgx7().b[0][1]++,JSON.stringify(key));}put(key,value){cov_24cgarcgx7().f[2]++;cov_24cgarcgx7().s[5]++;this.cache.write(this.cacheKeyString(key),value);cov_24cgarcgx7().s[6]++;return value;}get(key){cov_24cgarcgx7().f[3]++;cov_24cgarcgx7().s[7]++;return this.cache.read(this.cacheKeyString(key));}remove(key){cov_24cgarcgx7().f[4]++;cov_24cgarcgx7().s[8]++;this.cache.remove(this.cacheKeyString(key));}clear(){cov_24cgarcgx7().f[5]++;cov_24cgarcgx7().s[9]++;this.cache.clear();}size(){cov_24cgarcgx7().f[6]++;cov_24cgarcgx7().s[10]++;return this.cache.size();}}cov_24cgarcgx7().s[11]++;exports.PromiseCache=PromiseCache;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2phdmVkL3Byb21pc2UtY2FjaGUvc3JjL3Byb21pc2VDYWNoZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL2phdmVkL3Byb21pc2UtY2FjaGUvc3JjL3Byb21pc2VDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrREFBcUU7QUFPckUsTUFBYSxZQUFZO0lBR3ZCLFlBQVksRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFlO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBQSw2QkFBYyxFQUFxQixhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELGNBQWMsQ0FBQyxHQUFNO1FBQ25CLG9FQUFvRTtRQUNwRSxvRUFBb0U7UUFDcEUsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQU0sRUFBRSxLQUFpQjtRQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFNO1FBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFqQ0Qsb0NBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGUsIEVwaGVtZXJhbENhY2hlIH0gZnJvbSBcIkBhbGV4c2FzaGFyZWdhbi9zaW1wbGUtY2FjaGVcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlUGFyYW1zIHtcbiAgY2FjaGVDYXBhY2l0eTogbnVtYmVyO1xuICBjYWNoZVRUTDogbnVtYmVyO1xufVxuZXhwb3J0IGNsYXNzIFByb21pc2VDYWNoZTxLLCBWPiB7XG4gIHByaXZhdGUgY2FjaGU6IENhY2hlPHN0cmluZywgUHJvbWlzZTxWPj47XG5cbiAgY29uc3RydWN0b3IoeyBjYWNoZUNhcGFjaXR5LCBjYWNoZVRUTCB9OiBDYWNoZVBhcmFtcykge1xuICAgIHRoaXMuY2FjaGUgPSBFcGhlbWVyYWxDYWNoZTxzdHJpbmcsIFByb21pc2U8Vj4+KGNhY2hlQ2FwYWNpdHksIGNhY2hlVFRMKTtcbiAgfVxuXG4gIGNhY2hlS2V5U3RyaW5nKGtleTogSyk6IHN0cmluZyB7XG4gICAgLy8gTm90ZTogVGhpcyBpbXBsZW1lbnRhdGlvbiBtYXkgbm90IHN1ZmZpY2llbnRseSBkaWZmZXJlbnRpYXRlIGtleXNcbiAgICAvLyBmb3IgY2VydGFpbiBvYmplY3QgdHlwZXMgZGVwZW5kaW5nIG9uIHRoZWlyIHRvSlNPTiBpbXBsZW1lbnRhdGlvblxuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KTtcbiAgfVxuXG4gIHB1dChrZXk6IEssIHZhbHVlOiBQcm9taXNlPFY+KTogUHJvbWlzZTxWPiB7XG4gICAgdGhpcy5jYWNoZS53cml0ZSh0aGlzLmNhY2hlS2V5U3RyaW5nKGtleSksIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBnZXQoa2V5OiBLKTogUHJvbWlzZTxWPiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUucmVhZCh0aGlzLmNhY2hlS2V5U3RyaW5nKGtleSkpO1xuICB9XG5cbiAgcmVtb3ZlKGtleTogSyk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMuY2FjaGVLZXlTdHJpbmcoa2V5KSk7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gIH1cblxuICBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuc2l6ZSgpO1xuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjRjZ2FyY2d4NyIsImFjdHVhbENvdmVyYWdlIiwicyIsInNpbXBsZV9jYWNoZV8xIiwicmVxdWlyZSIsIlByb21pc2VDYWNoZSIsImNvbnN0cnVjdG9yIiwiY2FjaGVDYXBhY2l0eSIsImNhY2hlVFRMIiwiZiIsImNhY2hlIiwiRXBoZW1lcmFsQ2FjaGUiLCJjYWNoZUtleVN0cmluZyIsImtleSIsImIiLCJKU09OIiwic3RyaW5naWZ5IiwicHV0IiwidmFsdWUiLCJ3cml0ZSIsImdldCIsInJlYWQiLCJyZW1vdmUiLCJjbGVhciIsInNpemUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2phdmVkL3Byb21pc2UtY2FjaGUvc3JjL3Byb21pc2VDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWNoZSwgRXBoZW1lcmFsQ2FjaGUgfSBmcm9tIFwiQGFsZXhzYXNoYXJlZ2FuL3NpbXBsZS1jYWNoZVwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVQYXJhbXMge1xuICBjYWNoZUNhcGFjaXR5OiBudW1iZXI7XG4gIGNhY2hlVFRMOiBudW1iZXI7XG59XG5leHBvcnQgY2xhc3MgUHJvbWlzZUNhY2hlPEssIFY+IHtcbiAgcHJpdmF0ZSBjYWNoZTogQ2FjaGU8c3RyaW5nLCBQcm9taXNlPFY+PjtcblxuICBjb25zdHJ1Y3Rvcih7IGNhY2hlQ2FwYWNpdHksIGNhY2hlVFRMIH06IENhY2hlUGFyYW1zKSB7XG4gICAgdGhpcy5jYWNoZSA9IEVwaGVtZXJhbENhY2hlPHN0cmluZywgUHJvbWlzZTxWPj4oY2FjaGVDYXBhY2l0eSwgY2FjaGVUVEwpO1xuICB9XG5cbiAgY2FjaGVLZXlTdHJpbmcoa2V5OiBLKTogc3RyaW5nIHtcbiAgICAvLyBOb3RlOiBUaGlzIGltcGxlbWVudGF0aW9uIG1heSBub3Qgc3VmZmljaWVudGx5IGRpZmZlcmVudGlhdGUga2V5c1xuICAgIC8vIGZvciBjZXJ0YWluIG9iamVjdCB0eXBlcyBkZXBlbmRpbmcgb24gdGhlaXIgdG9KU09OIGltcGxlbWVudGF0aW9uXG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpO1xuICB9XG5cbiAgcHV0KGtleTogSywgdmFsdWU6IFByb21pc2U8Vj4pOiBQcm9taXNlPFY+IHtcbiAgICB0aGlzLmNhY2hlLndyaXRlKHRoaXMuY2FjaGVLZXlTdHJpbmcoa2V5KSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGdldChrZXk6IEspOiBQcm9taXNlPFY+IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5yZWFkKHRoaXMuY2FjaGVLZXlTdHJpbmcoa2V5KSk7XG4gIH1cblxuICByZW1vdmUoa2V5OiBLKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZS5yZW1vdmUodGhpcy5jYWNoZUtleVN0cmluZyhrZXkpKTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5zaXplKCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6InlpSkFzQkk7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBQUFBLGNBQUEsR0FBQUUsQ0FBQSxNLDZHQXRCSixNQUFBQyxjQUFBLEVBQUFILGNBQUEsR0FBQUUsQ0FBQSxNQUFBRSxPQUFBLGtDQU9BLEtBQWEsQ0FBQUMsWUFBWSxDQUd2QkMsWUFBWSxDQUFFQyxhQUFhLENBQUVDLFFBQVEsQ0FBZSxFQUFBUixjQUFBLEdBQUFTLENBQUEsTUFBQVQsY0FBQSxHQUFBRSxDQUFBLE1BQ2xELElBQUksQ0FBQ1EsS0FBSyxDQUFHLEdBQUFQLGNBQUEsQ0FBQVEsY0FBYyxFQUFxQkosYUFBYSxDQUFFQyxRQUFRLENBQUMsQ0FDMUUsQ0FFQUksY0FBY0EsQ0FBQ0MsR0FBTSxFQUFBYixjQUFBLEdBQUFTLENBQUEsTUFBQVQsY0FBQSxHQUFBRSxDQUFBLE1BQ25CO0FBQ0E7QUFDQSxNQUFPLE9BQU8sQ0FBQVcsR0FBRyxHQUFLLFFBQVEsRUFBQWIsY0FBQSxHQUFBYyxDQUFBLFNBQUdELEdBQUcsR0FBQWIsY0FBQSxHQUFBYyxDQUFBLFNBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxHQUFHLENBQUMsRUFDNUQsQ0FFQUksR0FBR0EsQ0FBQ0osR0FBTSxDQUFFSyxLQUFpQixFQUFBbEIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUUsQ0FBQSxNQUMzQixJQUFJLENBQUNRLEtBQUssQ0FBQ1MsS0FBSyxDQUFDLElBQUksQ0FBQ1AsY0FBYyxDQUFDQyxHQUFHLENBQUMsQ0FBRUssS0FBSyxDQUFDLENBQUNsQixjQUFBLEdBQUFFLENBQUEsTUFDbEQsTUFBTyxDQUFBZ0IsS0FBSyxDQUNkLENBRUFFLEdBQUdBLENBQUNQLEdBQU0sRUFBQWIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUUsQ0FBQSxNQUNSLE1BQU8sS0FBSSxDQUFDUSxLQUFLLENBQUNXLElBQUksQ0FBQyxJQUFJLENBQUNULGNBQWMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FDbEQsQ0FFQVMsTUFBTUEsQ0FBQ1QsR0FBTSxFQUFBYixjQUFBLEdBQUFTLENBQUEsTUFBQVQsY0FBQSxHQUFBRSxDQUFBLE1BQ1gsSUFBSSxDQUFDUSxLQUFLLENBQUNZLE1BQU0sQ0FBQyxJQUFJLENBQUNWLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FDN0MsQ0FFQVUsS0FBS0EsQ0FBQSxFQUFBdkIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUUsQ0FBQSxNQUNILElBQUksQ0FBQ1EsS0FBSyxDQUFDYSxLQUFLLEVBQUUsQ0FDcEIsQ0FFQUMsSUFBSUEsQ0FBQSxFQUFBeEIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUUsQ0FBQSxPQUNGLE1BQU8sS0FBSSxDQUFDUSxLQUFLLENBQUNjLElBQUksRUFBRSxDQUMxQixDLENBQ0R4QixjQUFBLEdBQUFFLENBQUEsT0FqQ0R1QixPQUFBLENBQUFwQixZQUFBLENBQUFBLFlBQUEsQyJ9