{"/Users/javed/promise-cache/src/promiseCache.ts":{"path":"/Users/javed/promise-cache/src/promiseCache.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":23},"end":{"line":4,"column":62}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":81}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":67}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":58}},"6":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":57}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":52}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":27}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":33}},"11":{"start":{"line":31,"column":0},"end":{"line":31,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":45},"end":{"line":8,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":24},"end":{"line":13,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":20},"end":{"line":17,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":13},"end":{"line":20,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":16},"end":{"line":23,"column":5}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":12},"end":{"line":26,"column":5}},"line":24},"6":{"name":"(anonymous_6)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":11},"end":{"line":29,"column":5}},"line":27}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":66}},"type":"cond-expr","locations":[{"start":{"line":12,"column":41},"end":{"line":12,"column":44}},{"start":{"line":12,"column":47},"end":{"line":12,"column":66}}],"line":12}},"s":{"0":1,"1":1,"2":1,"3":12,"4":49,"5":17,"6":17,"7":27,"8":1,"9":1,"10":9,"11":1},"f":{"0":12,"1":49,"2":17,"3":27,"4":1,"5":1,"6":9},"b":{"0":[41,8]},"inputSourceMap":{"version":3,"file":"/Users/javed/promise-cache/src/promiseCache.ts","sources":["/Users/javed/promise-cache/src/promiseCache.ts"],"names":[],"mappings":";;;AAAA,+DAAqE;AAOrE,MAAa,YAAY;IAGvB,YAAY,EAAE,aAAa,EAAE,QAAQ,EAAe;QAClD,IAAI,CAAC,KAAK,GAAG,IAAA,6BAAc,EAAqB,aAAa,EAAE,QAAQ,CAAC,CAAC;IAC3E,CAAC;IAED,cAAc,CAAC,GAAM;QACnB,oEAAoE;QACpE,oEAAoE;QACpE,OAAO,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED,GAAG,CAAC,GAAM,EAAE,KAAiB;QAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,GAAG,CAAC,GAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,GAAM;QACX,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;CACF;AAjCD,oCAiCC","sourcesContent":["import { Cache, EphemeralCache } from \"@alexsasharegan/simple-cache\";\n\n\nexport interface CacheParams {\n  cacheCapacity: number;\n  cacheTTL: number;\n}\nexport class PromiseCache<K, V> {\n  private cache: Cache<string, Promise<V>>;\n\n  constructor({ cacheCapacity, cacheTTL }: CacheParams) {\n    this.cache = EphemeralCache<string, Promise<V>>(cacheCapacity, cacheTTL);\n  }\n\n  cacheKeyString(key: K): string {\n    // Note: This implementation may not sufficiently differentiate keys\n    // for certain object types depending on their toJSON implementation\n    return typeof key === \"string\" ? key : JSON.stringify(key);\n  }\n\n  put(key: K, value: Promise<V>): Promise<V> {\n    this.cache.write(this.cacheKeyString(key), value);\n    return value;\n  }\n\n  get(key: K): Promise<V> | undefined {\n    return this.cache.read(this.cacheKeyString(key));\n  }\n\n  remove(key: K): void {\n    this.cache.remove(this.cacheKeyString(key));\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  size(): number {\n    return this.cache.size();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"033b016817d17d6990446bfb7b90487cedbb40ee","contentHash":"de595ad24a534df426f29b120a365e683efe188286febed5a42ba0a774d8a799"}}